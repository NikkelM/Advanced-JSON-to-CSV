{
	"$schema": "https://json-schema.org/draft/2020-12/schema",
	"title": "JSON to Notion configuration schema",
	"description": "Validates configuration input for the \"JSON to Notion\" script.",
	"type": "object",
	"additionalProperties": false,
	"properties": {
		"$schema": {
			"description": "The JSON schema to use for the configuration file.",
			"type": "string",
			"default": "config.schema.json"
		},
		"notionIntegrationKey": {
			"description": "The secret integration key for your Notion integration. Find it on your integration dashboard after creating a new integration on https://www.notion.so/my-integrations",
			"type": "string",
			"default": ""
		},
		"notionDatabaseId": {
			"description": "The ID of the database you want to run the integration on. You can find the ID in the URL of your database, e.g. https://www.notion.so/myworkspace/your-database-id",
			"type": "string",
			"default": ""
		},
		"inputFile": {
			"description": "The JSON file to import to Notion.",
			"type": "string",
			"default": "input.json",
			"pattern": ".*.json"
		},
		"propertyMappings": {
			"description": "The mapping of JSON keys to Notion property names. If an existing JSON key is not mapped, it will be ignored.",
			"type": "array",
			"default": [
				{
					"jsonKey": "keyInJson",
					"notionPropertyName": "keyInNotion",
					"notionPropertyType": "rich_text",
					"nestedPropertyPolicy": "useFirstProperty"
				}
			],
			"minItems": 1,
			"items": {
				"description": "A mapping of a JSON key to a Notion property name.",
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"jsonKey": {
						"description": "The JSON key to map to the Notion property.",
						"type": "string",
						"default": ""
					},
					"notionPropertyName": {
						"description": "The Notion property name to map to the JSON key.",
						"type": "string",
						"default": ""
					},
					"notionPropertyType": {
						"description": "The type of the Notion property. Note: Not all property types are supported as of now.",
						"type": "string",
						"default": "text",
						"enum": [
							"rich_text",
							"number",
							"select",
							"multi_select",
							"status",
							"date",
							"title",
							"files",
							"checkbox",
							"url",
							"email",
							"phone_number",
							"cover",
							"icon"
						]
					},
					"nestedPropertyPolicy": {
						"description": "The policy to use when the value to the specified JSON key another JSON object.",
						"type": "object",
						"default": {
							"policy": "useFirstProperty"
						},
						"properties": {
							"policy": {
								"description": "The policy to use when the value to the specified JSON key another JSON object.",
								"type": "string",
								"default": "useFirstProperty",
								"oneOf": [
									{
										"const": "useFirstProperty",
										"title": "Use the value of the first property within the nested property. This property must not be another object."
									},
									{
										"const": "concatenateProperties",
										"title": "The values of all properties within the nested property will be concatenated into a single string, with \",\" as a delimiter. This property must not be another object."
									},
									{
										"const": "usePriorityList",
										"title": "Try to use the value of the property with the highest priority as defined by the \"priorityList\" property. If a property with the specified key does not exist, move to the property with the next highest priority. The values of these properties must not be another object."
									}
								]
							},
							"priorityList": {
								"description": "The prioritized list of properties to use when the \"policy\" is set to \"usePriorityList\". The script will use the value of the property with the highest priority.",
								"type": "array",
								"default": [
									"highestPriorityProperty",
									"secondHighestPriorityProperty"
								],
								"minItems": 1,
								"uniqueItems": true
							}
						},
						"if": {
							"properties": {
								"policy": {
									"enum": [
										"usePriorityList"
									]
								}
							}
						},
						"then": {
							"required": [
								"priorityList"
							]
						}
					},
					"required": [
						"jsonKey",
						"notionPropertyName",
						"notionPropertyType"
					]
				}
			},
			"required": [
				"notionIntegrationKey",
				"notionDatabaseId",
				"inputFile",
				"inputIsArray",
				"propertyMappings"
			]
		}
	}
}